package com.amazonaws.lambda.demo;

import java.util.Map;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.StreamRecord;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;

public class LambdaFunctionHandler implements RequestHandler<DynamodbEvent, Boolean> {
//Start
	static AmazonDynamoDB dynamoDb;
    @Override
    public Boolean handleRequest(DynamodbEvent event, Context context) {
        context.getLogger().log("Received event: " + event);
        Boolean result = false;
        for (DynamodbStreamRecord record : event.getRecords()) {
        	if(record == null) {
            	continue;
            }
            context.getLogger().log(record.getEventID());
            context.getLogger().log(record.getEventName());
            context.getLogger().log(record.getDynamodb().toString());
            StreamRecord str = record.getDynamodb();
            Map<String, AttributeValue> item = str.getNewImage();
            result = this.IfCourseIsNew(item);
            return result;
        }
        return result;
    }
    public Boolean IfCourseIsNew(Map<String, AttributeValue> item) {
    	String boardId = item.get("boardId").toString();
    	String rosterId = item.get("rosterId").toString();
    	String borId = boardId.substring(4, 5);
    	String roId = rosterId.substring(4, 5);
    	if(borId.equals("0") && roId.equals("0")) {
    		return true;
    	}
    	return false;
    }
}