package com.amazonaws.lambda.demo;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider;
import com.amazonaws.auth.InstanceProfileCredentialsProvider;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.model.StreamRecord;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.PublishRequest;
import com.amazonaws.services.sns.model.PublishResult;

public class LambdaFunctionHandler implements RequestHandler<DynamodbEvent, Integer> {

	static AmazonDynamoDB dynamoDb;
	static AmazonSNS sns;
	
	@Override
    public Integer handleRequest(DynamodbEvent event, Context context) {
        context.getLogger().log("Received event: " + event);

        for (DynamodbStreamRecord record : event.getRecords()) {
        	if (record == null) {
                continue;
            }
            context.getLogger().log(record.getEventID());
            context.getLogger().log(record.getEventName());
            context.getLogger().log(record.getDynamodb().toString());
            StreamRecord str = record.getDynamodb();
            Map<String, AttributeValue> item = str.getNewImage();
            String boardId = item.get("boardId").toString();
            String announcementText = item.get("announcementText").toString();
            this.initDynamoDbClient();
            String notificationTop = this.getTopicArn(boardId);
            this.initSNSClient();
            this.publishSNS(notificationTop, announcementText);
        }
        return event.getRecords().size();
    }
    
    private void initDynamoDbClient() {
    	if(dynamoDb == null) {				
			dynamoDb = AmazonDynamoDBClientBuilder
					.standard()
					.withCredentials(new EnvironmentVariableCredentialsProvider())
					.withRegion("us-east-2")
					.build();
		}
    }
    
    private void initSNSClient() {
    	if(sns == null) {
			 sns= AmazonSNSClientBuilder
					 .standard()
					 .withCredentials(new EnvironmentVariableCredentialsProvider())
					 .withRegion("us-east-2")
					 .build();
		}
    }
    
    private String getTopicArn(String boardId) {
    	 String borId = boardId.substring(4, 5);
    	 Map<String, AttributeValue> attributeValues = new HashMap<String, AttributeValue>();
         attributeValues.put(":val1", new AttributeValue().withN(borId));
         ScanRequest scanRequest = new ScanRequest()
        		 .withTableName("courseBoard")
        		 .withFilterExpression("boardId = :val1")
        		 .withExpressionAttributeValues(attributeValues);
         ScanResult scanResult = dynamoDb.scan(scanRequest);
         List<Map<String,AttributeValue>> results = scanResult.getItems();
         Map<String,AttributeValue> map1 = results.get(0);
         String courseId = map1.get("courseId").toString();
         
         String courId = courseId.substring(4, 12);
         Map<String, AttributeValue> attributeValues2 = new HashMap<String, AttributeValue>();
         attributeValues2.put(":val2", new AttributeValue().withS(courId));
         ScanRequest scanRequest2 = new ScanRequest()
        		 .withTableName("course")
        		 .withFilterExpression("courseId = :val2")
        		 .withExpressionAttributeValues(attributeValues2);
         ScanResult scanResult2 = dynamoDb.scan(scanRequest2);
         List<Map<String,AttributeValue>> results2 = scanResult2.getItems();
         Map<String,AttributeValue> map2 = results2.get(0);
         String notificationTopictemp = map2.get("notificationTopic").toString();
         String notificationTopic = notificationTopictemp.substring(4,47);
         return notificationTopic;
    }
    
    private void publishSNS(String notificationTopic, String announcementText) {
    	PublishRequest publishRequest = new PublishRequest(notificationTopic,announcementText);
    	PublishResult publishResult = sns.publish(publishRequest);
    	//print MessageId of message published to SNS topic
    	System.out.println("MessageId - " + publishResult.getMessageId());
    }
    
}